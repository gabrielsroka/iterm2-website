2022-05-24: Make the session closing dialog that tells you
what jobs get killed know about ssh

2022-05-24: Add autopolling. Framer can run ps once a second
and onlys end an update when something changes. It then
sleeps until you request autopolling again, to keep it from
spinning forever when the client is gone.

2022-05-24: Fix bug where -[LineBuffer
__findPosition:inBlock:inOffset:] returned offset 0 when
you're looking for exactly the last position in the block

2022-05-24: Don't allow seal to create interior partial
blocks and ensure that search only indicates a partial last
line when it's also the last block to avoid triggering bad
behavior in filtering when it backs up to research the last
line

2022-05-24: [framer]Send diffs of processes instead of
everything

2022-05-24: State restoration for framer ps

2022-05-24: Make python parse the output of ps and only send
results if something changed.

2022-05-23: Fix bugs in detaching and in python 3.10 with
exception handling

2022-05-23: Fix restoration for nested ssh sessions

2022-05-23: Get nested ssh sessions basically working but
not performant or well tested

2022-05-22: Add restoration support to ssh mode

2022-05-21: [framer]Initialize tty size

2022-05-21: Update framer

2022-05-21: Fix call to appendBannerMessage on wrong queue

2022-05-21: Fix bug in input chunking. Framer needs
continuation marks and conductor.sh does not

2022-05-21: Modify framer's %output to send channel -1 for
login shells so the echo probe can detect side-channels
without needing to know the login shell's pid

2022-05-21: Get process cache working for ssh sessions. Fix
IO for background jobs in framer. Fix parsing by using a
separate vt100parser for each background job.

2022-05-19: Add it2ssh as resource

2022-05-19: Fix echo probe in ssh

2022-05-19: Add sigwinch support to framer

2022-05-18: Add framer to ssh integration.

framer: - Logging improvements.  - Expand ~ and $VARS in
login cwd - Send process ID along with %output - Send reason
with abort - Put identifier as first arg of "end"

Main app[: - Add framer and support for it to conductor.
Nested framer support is there but untested.  - Add SSH_*
tokens.
  - SSH_BEGIN: Beginning of command output - SSH_OUTPUT:
  Wrapped output from framer. Uses CSI parameters to
  communicate pid and channel. This is used internally in
  VT100Parser while unwrapping %output. VT100Terminal
  repurposes it as a container for side-channel output.  -
  SSH_TERMINATE: Framer job exited. Ises CSI parameters to
  give pid and return code.  - Add sshInfo to VT100Token to
  identifier what framer job produced a token. This is
  attached to regular (i.e., not SSH_*) tokens so we can
  tell if it's output from a framer login shell or from a
  side channel. Side channels aren't used yet.

2022-05-16: Add framer

2022-05-14: Update shell integration submodule

2022-05-14: Don't print an ssh banner if there are no ssh
sessions running when one ends.

2022-05-14: Fix bugs in tar

2022-05-14: [it2ssh] Split writes into small lines.

2022-05-13: Add accessory view to open panel for file
uploads with destination folder

2022-05-13: Show a banner when ssh exits. Miscellanous ssh
bug fixes too

2022-05-13: Refactor conductor and update SI submodule

2022-05-13: Parse ssh command line arguments. Handle
non-shell-launching commands correctly.

Remove conductor on reset.

Accept list of boolean ssh args in DCS sequence.

2022-05-12: Parse SSH arguments poorly to establish an
identity of (hostname,username,port). Use that in
_sshHostNames instead of just hostname.

Fix a bug where we didn't unhook from
screenDidUnhookSSHConductor.

Don't recycle the current directory when opening an ssh
session from a non-ssh session or an ssh session with a
different identity.

Show a banner when beginning an ssh session.

Don't queue writes until the conductor tells you to,
otherwise you can't enter a passphrase.

2022-05-12: - Queue writes while initializing conductor.  -
When splitting a pane or creating a new tab from an ssh
session, make the new session connect to the same host and
(if so configured) use the same directory.  - Keep a stack
of ssh hostnames and extend the protocol to indicate when an
ssh session ends. To do this, introduce a unique ID for each
ssh session.  - Don't try to cd to the local machine's home
directory in ssh

2022-05-11: Update submodules

2022-05-11: Add support for uploading payloads

2022-05-11: Remove UserInterfaceState.xcuserstate

2022-05-11: Add new xcode garbage to gitignore

2022-05-10: Add support for sending environment variables in
it2ssh

2022-05-10: Add UI for configuring SSH in profiles

2022-05-09: Add ssh option to login command menu using
it2ssh

2022-05-09: Add parser support for ssh integration using a
new DCS code

2022-05-05: Add option to upgrade to full-environment
scripts in dependency editor

2022-05-05: [portholes] When you set the language to JSON,
ensure it produces a value even if it's an error

2022-05-05: Remove incorrect assertion. There could be
scrollback overflow if state is shared. This can happen
during resize.

2022-05-02: Fix a bug where scrollbackOverflow was always 0
or 1, causing scroll position not to lock when userScroll is
enabled. Issue 10385

2022-05-02: Call setNeedsDisplay when the selection changes

2022-05-02: Add NSLocale.preferredLanguages to candidates
for LANG for issue 10297

2022-05-02: [python] Preserve open/save pane folder, return
nil instead of throwing exception on user cancellation
(#469)

* [python API] Change the open/save panels

1. Open the last directory by default.  2. Return `None` if
the user cancels.

Co-authored-by: George Nachman <gnachman+github@gmail.com>
2022-05-02: Fix crash in issue 10387

2022-05-02: Add support for search to portholes. Save and
restore wide mode.

2022-04-30: Fix a bug in core search where deltas was
indexed by a rawline offset rather than by a code point
offset. Yikes

2022-04-30: Fix missing quote

2022-04-30: Add wide mode to portholes. Also fix handling of
language autodetection when it fails and returns undefined
(treat it as plaintext for state restoration purposes).

2022-04-29: Add support for copying from portholes

2022-04-29: Copy swifty markdown framework

2022-04-29: Add portholes.

* Add SwiftyMarkdown swift module.  * Fix a bug in
dropExcessLinesWithWidth where cursor_rawline was not
adjusted.  * Make appendContentsOfLineBuffer optionally
transfer the cursor position and return the number of lines
dropped.  * Fix a bug where shift-arrow events to enter copy
mode were handled twice.  * Fix a crash when selection
promises are nil, which can happen after a session is
closed.  * Fix a bug where SetDecodedImage called
invalidateRestorableState on the wrong thread.  * Give
ScreenCharArray the ability to (de)serialize * Fix a bug
where VT100GridRange.dirtyRangeForLine: didn't respsect
allDirty.  * Add VT100GridCoordRangeInvalid * Fix a bug when
synchronizing while state is shared that screwed up line
buffers because the serach buffer tries to merge from the
immuatable state's line buffer * Lots of fixes to how line
buffer positions are converted to coordinates to deal with
bugs around empty lines. This probably broke things.  * Fix
an apparent off-by-one in
hideOnScreenNotesAndTruncateSpanners.  * Accept a type=
argument on OSC 1337 File= * Fix bug sin iTermLineblockArray
around locating blank lines.

See the markdown_porthole branch for individual commits.

Note that SwiftyMarkdown and Highlightr are added as binary
frameworks rather than Swift package dependencies because
the latter simply does not work with xcodebuild.

2022-04-12: Remove some unnecssary calls to refresh which
can only have negative side effects, as seen in issue 10325.
Selections use absolute ranges so refresh should never be
necessary.

2022-04-12: Add logging for origin mode issue 10339

2022-04-12: If a session is short lived, uses a login shell,
the shell does not exist, and the profile can be changed
offer to change the shell to /bin/zsh which will always
exist to get the user unstuck. Issue 10336

2022-04-12: Fix crash when your profile specifies a font tha
doesn't exist. Issue 10343

2022-04-12: Fix a crash when resizing with tail find. Or
when the line buffer is ever empty (somehow)

2022-04-12: Add a TODO

2022-04-12: Fix performBlockWithTemporaryChanges to restore
the num_wrapped_liens cache. This fixes an assertion when
switching between primary/secondary grid.

2022-04-12: Optimize -[LineBuffer
convertPositions:withWidth:]. Objective C overhead made this
one of the slowest parts of tail find. Rewrite the hot path
in C++.

2022-04-12: Avoid making lots of copies of haystack when
searching; provide a range instead.

2022-04-12: Change regex prefix/suffix to private range
chars. Add IMPOSSIBLE_CHAR, a private range code that the
search algorithm wants never to exist in the strings it
searches over.

The purpose of this change is just to improve consistency
and clarity.

2022-04-11: Avoid making multiple line block copies during
tail find. Instead, keep a running copy of the line block in
sync with the 'real' main-thread instance using merge to
keep it recent and releasing it when not searching. Add a
method to LineBuffer to more safely temporarily append stuff
to a line buffer.

2022-04-11: Deallocate line blocks on a serial queue to
avoid an explosion of threads and lock contention

2022-04-11: Seal line block at each sync to reduce tail find
cost

2022-04-11: Optimize ExpandScreenChar. It showed up hot in a
profile of tail find

2022-04-11: Add a TODO calling out slowness for searching
long lines - accidentally quadratic code

2022-04-11: Don't copy _numberOfFullLinesCache when copying
a LineBlock. Copying a hash map is very slow and for the
most part we don't need these. It'll be cheaper to recompute
it almost all the time.

2022-04-11: Prune nils from LineBlock.clients. It used to
accrue a ton of empty boxes leading to quadratic complexity,
causing tail searches to get really slow.

2022-04-11: Disable asan

2022-04-11: Add support for 'sequence' key actions, which
let you do multiple actions one after another. Issue 10315

2022-04-09: Update shell integration

2022-04-09: Fix crash when showing context menu wihtout a
working directory or remote host and there's a smart
selection action. Issue 10308

2022-04-09: [python API] Add support for open/save panels

Also fixes a bug where optional arguments to built-in
functions were actually required.

2022-04-08: Use NSTask in pidinfo instead of fork()/exec()
because of issue 10337

2022-04-08: Make option-cmd-click choose the second smart
selection action

2022-04-08: Add copy as a smart selection action

2022-04-07: Add assertions to track down segfault in
copyLineToBuffer:width:lineNum:continuation:. See crash
1648809545.408710187.txt

2022-04-07: Fix crash when process cache is initialized off
the main thread, as happens with iTermMonoServerJobManager.
See crash 3.5.0beta5/1647084824.1661329995.txt

2022-04-07: Add debug logging for issue 8899

2022-04-06: Remove session from MovePaneController after
dragging a tab into a split pane. Fixes a bug where after
doing so split pane drags don't begin. Issue 10335

2022-04-06: Fix a bug in the password manager's search
feature where after filtering out an entry it never
reappears

2022-04-06: Fix crash when pressing left or right arrow in
command history. Issue 10322

2022-04-06: Vacuum and checkpoint the state restoration DB
after db ready callbacks get run to avoid blocking opening
initial windows. Unfortunately the DB finishes loading graph
records before whenReady gets called so it ends up blocking
for a long time on checkpointing. Issue 10328

2022-04-05: Handle 1password timeout errors. See
https://1password.community/discussion/128167/cli-v2-not-connecting-to-desktop-app-sandbox-issue

2022-04-05: Fix bug in mark rendering when only display is
nonretina. Issue 10291

2022-04-05: Fix bug in parsing bind-keys for a literal of -
which got confused with a flag. Issue 10301

2022-04-04: Make get_session_by_id return buried sessions by
default. Fixes a bug where a buried tmux gateway couldn't be
found by Tmux.owning_session. See email thread 'Open tmux
profile when VPN comes up if not open'

2022-04-04: Add 1password debug logging

2022-04-04: Make option-cmd-enter a shortcut for 'convert
matches to cursors', usable in composer. Make the composer
first responder when you do that so the cursors will be
usable.

2022-04-04: Add main menu to context menu in LSUI mode

2022-04-03: Fix a race in coprocess error reporting where we
read from stderr after -terminate runs, causing that output
to be lost. Now synchronize it so the delegate isn't
notified of termination until we finish reading from stderr

2022-04-03: Remove loop parameter from asyncio.Queue. (#466)

It no longer works in Python 3.10. removed the loop
parameter from asyncio.Queue. More background here:
https://stackoverflow.com/questions/60312374/what-are-all-these-deprecated-loop-parameters-in-asyncio
2022-04-03: Document how to clear a background image (#468)


2022-04-03: Add advanced pref to hide new tab button in
tabbar

2022-04-03: Add totd for composer power features

2022-04-03: Add support for sending one command of many from
the composer

2022-04-02: Update MultiCursor

2022-04-02: Composer improvements.

Rename "Convert Matches to Selections" to "Select Matches",
which is the standard. Use performFindPanelAction: instead
of convertMatchesToSelections: so Select Matches will work
in the composer as well as in PTYTextView.  Remove
performFindPanelAction: from PseudoTerminal since it really
belongs in PTYTextView. Add a disgusting hack to
iTermComposerView to make Select Matches work in the
composer.

ARCify iTermWarning so I can use it from Swift.  Add
mullability annotations to it.

Add CommandExplainer to centrailze explainshell URL logic.

Make cmd-click on a command in the composer open
explainshell for just that command. The logic is now mostly
in ComposerTextView, but it uses a URL with the iterm2
scheme so some of it ended up in the app delegate as well.

Change composer's help to describe shortcuts.

Add iTermTextPopoverViewController.sizeToFit and beat
AppKit's buggy sizing code into submission.

2022-04-02: Add drag handle to composer. Reduce help text to
make it less cluttered

2022-04-01: Use performFindPanelAction: with tag 1 for Find
(this is standard) instead of showFindPanel:. Enable the
find bar in the composer

2022-04-01: Port ComposerTextView to swift. Make it a
subclass of MultiCursorTextView. The composer now has
support for multiple cursors.
