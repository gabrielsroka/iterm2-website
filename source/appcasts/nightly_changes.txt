2022-06-26: Fix a bug where tailfind didn't select the right
ranges because searchBuffer could get out of sync because
the immutable linebuffer is never dirty after merging,
therefore causing the serachbuffer never to merge.

2022-06-26: Add key binding actions to swap with
next/previous pane. Issue 10357

2022-06-26: Add debug logging for password manager shake-no
for issue 10432

2022-06-26: Use x11 mouse instead sgr mouse for xterm-new.
Issue 10449

2022-06-26: Move copy mode cursor on nextMark/previousMark
and when moving the cursor ensure it remains visible. Issue
10448

2022-06-26: Use system python3 in api makefile

2022-06-26: [python] Bump version

2022-06-25: Add support for tmux 3.3 to shell integration
and utilities. Also fix a bug in internet-free install.
Remove it2ssh when updating utiliities since it is not baked

2022-06-25: Enable focus reporting in tmux integration if
tmux is configured to use it. See
https://github.com/tmux/tmux/issues/2856

2022-06-25: Add more assertions about nil fonts

2022-06-25: Fix warning, add separator to screens menu in
prefs

2022-06-25: Use more meaningful names for screens in prefs.
Issue 10428

2022-06-25: Improve error handling when the tempdir can't be
created when installing the python runtime. Issue 8792

2022-06-25: Ensure that the profileName variable is correct
when changing profile by control sequence. Issue 10424

2022-06-24: Don't clobber symlinks when saving prefs to
remote folder. Issue 7921

2022-06-23: Use tuples instead of dictionaries in
iTermGraphDeltaEncoder's enumerator to reduce overhead of
dictionary comparison. Issue 10414.

2022-06-23: Remove unnecessary and slow duplicate check from
iTermOrderedDictionary that accounted for 25% of the time in
issue 10414

2022-06-23: Post fake flags-changed events when do-not-remap
caused an implicit flags change by failing to remap. Issue
10220

2022-06-23: Prevent assertion failure

2022-06-23: Add option to disable sqlite integrity check to
debug issue 10232.

2022-06-23: Prevent crash when selectiveEraseRange is called
with bogus args. Issue 10409

2022-06-23: Tweak content navigation shortcuts animation

2022-06-23: Add shortcut navigation, which is a fancy way of
saying key equivalents for opening URLs we find as search
results. Issue 10408

2022-06-22: Don't scroll when revealing a search result if
it is unnecessary

2022-06-21: Add find indicator

2022-06-19: Set keyPressHandled based on comment in
https://github.com/gnachman/iTerm2/pull/279

2022-06-19: Disable remove button from sequence keybinding
vc on initialization

2022-06-19: Allow single part hostnames in http(s) smart
selection. Issue 10388. Credit to Neil Jarvis

2022-06-19: When switching to another app because a hotkey
window is rolling out, disable secure keyboard entry. Issue
10386

2022-06-18: Turn off copy when when attachingg to tmux to
avoid appearing hung if tmux.conf has an error

2022-06-18: Fix force unwrap crash

2022-06-17: Add a visual effect view to the job tree view so
the kill combobox is more well defined. It just looked
funny.

2022-06-17: Add context menu for job tree view. Issue 10358

2022-06-17: Update protobuf runtime to 3.19.4

2022-06-16: Use system protoc. Require protoc at least 3.19
because some corner of DLL hell breaks loading the iterm2
module, saying:

TypeError: Descriptors cannot not be created directly.  If
this call came from a _pb2.py file, your generated code is
out of date and must be regenerated with protoc >= 3.19.0.
If you cannot immediately regenerate your protos, some other
possible workarounds are:
 1. Downgrade the protobuf package to 3.20.x or lower.  2.
 Set PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python (but this
 will use pure-Python parsing and will be much slower).

More information:
https://developers.google.com/protocol-buffers/docs/news/2022-05-06#python-updates

But don't bother visiting the url because it says diddly
squat about this problem. I'm going to hope that
regenerating with 3.19 doesn't break anything for anyone
everywhere but ¯\_(ツ)_/¯

2022-06-16: Fix a bug where manual minimap entries weren't
removed when a prompt's return code is set. Issue 10097

2022-06-16: Optimize removing prompt marks below a given
line. This speeds up EraseInDisplay. Issue 10352

2022-06-16: When inserting a tab, if the window is an
already-created hotkey window, show the window instead of
just ordering the window front (since its alpha will be
zero). Issue 9135

2022-06-16: Fix crash when using invalid variable paths.
Issue 10347

2022-06-16: Fix crash when enabling auto-rainbow

2022-06-15: Clean up logging a bit

2022-06-15: Reenable autopoll

2022-06-15: Add --deep codesigning flag back to unbreak
image decoder

2022-06-15: Add a run script build phase to sign th
efileprovider app extension based on a stack overflow
comment (see script for link)

2022-06-14: Trying to make the file provider in the nightly
build target work. At this point the Info.plist files have
the right version (same for plugin as main app) but it fails
saying that plugins must be sandboxed. I think that points
to a signing problem.

2022-06-14: Fix crash, tweak signing

2022-06-14: Implement downloads

2022-06-14: Directory listing works (barely)!

2022-06-12: IPC is working!!!

2022-06-11: Update file provider with one that actually
works

2022-06-11: Flail around trying to make file provider work.
Adds a bunch of useful infra like a service but doesn't
actually work

2022-06-05: Change both main app's and extension's
entitlements to specify
com.apple.security.application-groups of (team prefix)iTerm.
I'm not sure that mattered. Remove --deep from main app, and
change provider's Info.plist's
NSExtensionFileProviderDocumentGroup to match the app group.
It now works!

2022-06-04: Try to use the file provider. It doesn't work.
Console complains that iTermFileProvider.appex: plug-ins
must be sandboxed

2022-06-04: Add file provider extension to app group

2022-06-04: Add file provider extension

2022-06-04: Add main app to an app group

2022-06-04: Switch to managed signing with dev certificate
for Development target

2022-06-04: Update to latest SI submodule

2022-06-04: Add fish SI loader

2022-06-04: Handle framer login shell execution failuire
properly.

Update to latest it2ssh

Handle shell integration injection over ssh.

Make a bunch of ShellIntegrationInjection synchronous.

2022-06-03: Show login shell in general prefs

2022-06-03: Shell injection working in fish

2022-06-03: Add bash shell integration injection and add
flag to enable automatic shell integration injection to
prefs

2022-06-02: Delete a bunch of dead code including
serialization stuff

2022-06-02: Add profile pref to load shell integration
automatically

2022-06-02: Rip out zsh new-user stuff which doesn't seem to
run on modern macOS. Get zsh shell integration injection
working locally

2022-06-02: Initial implementation

2022-06-02: Fix bug in backtracking

2022-06-02: Add minified it2ssh

2022-06-01: Fix a leak of VT100ScreenMutableState

2022-06-01: Fix leak of VT100Parser

2022-06-01: Fix recovery when autopoll is enabled, plus
various minor tweaks

2022-06-01: Fix ssh recovery

2022-06-01: Make framer log verbosely when debug logging is
on

2022-06-01: Make framer IDs shorter

2022-06-01: Fix a bug in conductor parser with inner OSC
codes that get truncated after the semicolon. Also, make
logging improvements

2022-06-01: whitespace

2022-06-01: Switch to OSC-delimted rather than
newline-delimited protocol for conductor/framer to avoid
having to deal with tty craziness

2022-05-31: ssh recovery and win size refactor.

- Recover when ssh sessions get into a wonky state, in
particular for orphan recovery.  - Jiggle upon recovering an
orphan to trigger ssh recovery (but also to redraw
interactive apps) - Move winsize ioctl sending logic to
WinSizeController. The old code would reorder resizes in the
presence of jiggles and defers and such and now it is saen.

2022-05-27: Implement framer recovery and handle input from
framer in OSC 134

2022-05-26: Wrap framer data in OSC 134 to hide it if things
go sideways (like orphan restoration happens)

2022-05-25: Add SecretServer, a little unix domain socket
server that produces random numbers so it2ssh can prove it
was launched locally as a condition of exporting files and
environment variables to the remote host

2022-05-25: Modify framer/conductor protocol to specify if
it's framing in end messages. Remove sshHostnames.

2022-05-25: Fix how ssh identities are compared

2022-05-24: Add menu item to disconnect from ssh

2022-05-24: Don't unhook DCS until hardStop so that
conductor session closing can be undoable

2022-05-24: Make the session closing dialog that tells you
what jobs get killed know about ssh

2022-05-24: Add autopolling. Framer can run ps once a second
and onlys end an update when something changes. It then
sleeps until you request autopolling again, to keep it from
spinning forever when the client is gone.

2022-05-24: Fix bug where -[LineBuffer
__findPosition:inBlock:inOffset:] returned offset 0 when
you're looking for exactly the last position in the block

2022-05-24: Don't allow seal to create interior partial
blocks and ensure that search only indicates a partial last
line when it's also the last block to avoid triggering bad
behavior in filtering when it backs up to research the last
line

2022-05-24: [framer]Send diffs of processes instead of
everything

2022-05-24: State restoration for framer ps

2022-05-24: Make python parse the output of ps and only send
results if something changed.

2022-05-23: Fix bugs in detaching and in python 3.10 with
exception handling

2022-05-23: Fix restoration for nested ssh sessions

2022-05-23: Get nested ssh sessions basically working but
not performant or well tested

2022-05-22: Add restoration support to ssh mode

2022-05-21: [framer]Initialize tty size

2022-05-21: Update framer

2022-05-21: Fix call to appendBannerMessage on wrong queue

2022-05-21: Fix bug in input chunking. Framer needs
continuation marks and conductor.sh does not

2022-05-21: Modify framer's %output to send channel -1 for
login shells so the echo probe can detect side-channels
without needing to know the login shell's pid

2022-05-21: Get process cache working for ssh sessions. Fix
IO for background jobs in framer. Fix parsing by using a
separate vt100parser for each background job.

2022-05-19: Add it2ssh as resource

2022-05-19: Fix echo probe in ssh

2022-05-19: Add sigwinch support to framer

2022-05-18: Add framer to ssh integration.

framer: - Logging improvements.  - Expand ~ and $VARS in
login cwd - Send process ID along with %output - Send reason
with abort - Put identifier as first arg of "end"

Main app[: - Add framer and support for it to conductor.
Nested framer support is there but untested.  - Add SSH_*
tokens.
  - SSH_BEGIN: Beginning of command output - SSH_OUTPUT:
  Wrapped output from framer. Uses CSI parameters to
  communicate pid and channel. This is used internally in
  VT100Parser while unwrapping %output. VT100Terminal
  repurposes it as a container for side-channel output.  -
  SSH_TERMINATE: Framer job exited. Ises CSI parameters to
  give pid and return code.  - Add sshInfo to VT100Token to
  identifier what framer job produced a token. This is
  attached to regular (i.e., not SSH_*) tokens so we can
  tell if it's output from a framer login shell or from a
  side channel. Side channels aren't used yet.

2022-05-16: Add framer

2022-05-14: Update shell integration submodule

2022-05-14: Don't print an ssh banner if there are no ssh
sessions running when one ends.

2022-05-14: Fix bugs in tar

2022-05-14: [it2ssh] Split writes into small lines.

2022-05-13: Add accessory view to open panel for file
uploads with destination folder

2022-05-13: Show a banner when ssh exits. Miscellanous ssh
bug fixes too

2022-05-13: Refactor conductor and update SI submodule

2022-05-13: Parse ssh command line arguments. Handle
non-shell-launching commands correctly.

Remove conductor on reset.

Accept list of boolean ssh args in DCS sequence.

2022-05-12: Parse SSH arguments poorly to establish an
identity of (hostname,username,port). Use that in
_sshHostNames instead of just hostname.

Fix a bug where we didn't unhook from
screenDidUnhookSSHConductor.

Don't recycle the current directory when opening an ssh
session from a non-ssh session or an ssh session with a
different identity.

Show a banner when beginning an ssh session.

Don't queue writes until the conductor tells you to,
otherwise you can't enter a passphrase.

2022-05-12: - Queue writes while initializing conductor.  -
When splitting a pane or creating a new tab from an ssh
session, make the new session connect to the same host and
(if so configured) use the same directory.  - Keep a stack
of ssh hostnames and extend the protocol to indicate when an
ssh session ends. To do this, introduce a unique ID for each
ssh session.  - Don't try to cd to the local machine's home
directory in ssh

2022-05-11: Update submodules

2022-05-11: Add support for uploading payloads

2022-05-11: Remove UserInterfaceState.xcuserstate

2022-05-11: Add new xcode garbage to gitignore

2022-05-10: Add support for sending environment variables in
it2ssh

2022-05-10: Add UI for configuring SSH in profiles

2022-05-09: Add ssh option to login command menu using
it2ssh

2022-05-09: Add parser support for ssh integration using a
new DCS code

2022-05-05: Add option to upgrade to full-environment
scripts in dependency editor

2022-05-05: [portholes] When you set the language to JSON,
ensure it produces a value even if it's an error

2022-05-05: Remove incorrect assertion. There could be
scrollback overflow if state is shared. This can happen
during resize.

2022-05-02: Fix a bug where scrollbackOverflow was always 0
or 1, causing scroll position not to lock when userScroll is
enabled. Issue 10385

2022-05-02: Call setNeedsDisplay when the selection changes

2022-05-02: Add NSLocale.preferredLanguages to candidates
for LANG for issue 10297

2022-05-02: [python] Preserve open/save pane folder, return
nil instead of throwing exception on user cancellation
(#469)

* [python API] Change the open/save panels

1. Open the last directory by default.  2. Return `None` if
the user cancels.

Co-authored-by: George Nachman <gnachman+github@gmail.com>
2022-05-02: Fix crash in issue 10387

2022-05-02: Add support for search to portholes. Save and
restore wide mode.
